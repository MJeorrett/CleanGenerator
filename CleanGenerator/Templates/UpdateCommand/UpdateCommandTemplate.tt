<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using <#= _model.ProjectName #>.Application.Common.AppRequests;
using <#= _model.ProjectName #>.Application.Common.Interfaces;
using Microsoft.EntityFrameworkCore;
using System.Text.Json.Serialization;

namespace <#= _model.ProjectName #>.Application.<#= _model.EntityTypeName #>s.Commands.Update;

public record Update<#= _model.EntityTypeName #>Command
{
    [JsonIgnore]
    public int <#= _model.EntityTypeName #>Id { get; init; }
<#
    foreach(var propertyConfig in _model.PropertyConfigs)
    {
#>
    public <#= propertyConfig.Type #> <#= propertyConfig.Name #> { get; init; }<#= propertyConfig.BuildPropertyDefault() #>
<#
    }
#>
}

public class Update<#= _model.EntityTypeName #>CommandHandler : IRequestHandler<Update<#= _model.EntityTypeName #>Command>
{
    private readonly IApplicationDbContext _dbContext;

    public Update<#= _model.EntityTypeName #>CommandHandler(IApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<AppResponse> Handle(
        Update<#= _model.EntityTypeName #>Command command,
        CancellationToken cancellationToken)
    {
        var entity = await _dbContext.<#= _model.EntityTypeName #>s
            .FirstOrDefaultAsync(_ => _.Id == command.<#= _model.EntityTypeName #>Id, cancellationToken);

        if (entity == null)
        {
            return new(404);
        }

<#
    foreach(var propertyConfig in _model.PropertyConfigs)
    {
#>
        entity.<#= propertyConfig.Name #> = command.<#= propertyConfig.Name #>;
<#
    }
#>

        await _dbContext.SaveChangesAsync(cancellationToken);

        return new(200);
    }
}