<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using <#= _model.ProjectName #>.Application.Common.AppRequests;
using <#= _model.ProjectName #>.Application.Common.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace <#= _model.ProjectName #>.Application.<#= _model.EntityTypeName #>s.Commands.Delete;

public record Delete<#= _model.EntityTypeName #>Command
{
    public required int <#= _model.EntityTypeName #>Id { get; init; }
}

public class Delete<#= _model.EntityTypeName #>CommandHandler : IRequestHandler<Delete<#= _model.EntityTypeName #>Command>
{
    private readonly IApplicationDbContext _dbContext;

    public Delete<#= _model.EntityTypeName #>CommandHandler(IApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<AppResponse> Handle(
        Delete<#= _model.EntityTypeName #>Command command,
        CancellationToken cancellationToken)
    {
        var entity = await _dbContext.<#= _model.EntityTypeName #>s
            .FirstOrDefaultAsync(_ => _.Id == command.<#= _model.EntityTypeName #>Id, cancellationToken);

        if (entity is null)
        {
            return new(404);
        }

        _dbContext.<#= _model.EntityTypeName #>s.Remove(entity);
        await _dbContext.SaveChangesAsync(cancellationToken);

        return new(200);
    }
}
