<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using <#= _model.ProjectName #>.Application.Common.AppRequests;
using <#= _model.ProjectName #>.Application.Common.Interfaces;
using <#= _model.ProjectName #>.Core.Entities;

namespace <#= _model.ProjectName #>.Application.<#= _model.EntityTypeName #>s.Commands.Create;

public class Create<#= _model.EntityTypeName #>Command
{
<#
    foreach(var propertyConfig in _model.PropertyConfigs)
    {
#>
    public <#= propertyConfig.Type #> <#= propertyConfig.Name #> { get; init; }<#= propertyConfig.BuildPropertyDefault() #>
<#
    }
#>
}

public class Create<#= _model.EntityTypeName #>CommandHandler : IRequestHandler<Create<#= _model.EntityTypeName #>Command, int>
{
    private readonly IApplicationDbContext _dbContext;

    public Create<#= _model.EntityTypeName #>CommandHandler(IApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<AppResponse<int>> Handle(
        Create<#= _model.EntityTypeName #>Command command,
        CancellationToken cancellationToken)
    {
        var entity = new <#= _model.EntityTypeName #>Entity
        {
<#
    foreach(var propertyConfig in _model.PropertyConfigs)
    {
#>
            <#= propertyConfig.Name #> = command.<#= propertyConfig.Name #>,
<#
    }
#>
        };

        _dbContext.<#= _model.EntityTypeName #>s.Add(entity);

        await _dbContext.SaveChangesAsync(cancellationToken);

        return new(201, entity.Id);
    }
}