<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using <#= _model.ProjectName #>.Application.<#= _model.EntityTypeName #>s.Dtos;
using <#= _model.ProjectName #>.Application.Common.AppRequests;
using <#= _model.ProjectName #>.Application.Common.AppRequests.Pagination;
using <#= _model.ProjectName #>.Application.Common.Interfaces;
using <#= _model.ProjectName #>.Core.Entities;

namespace <#= _model.ProjectName #>.Application.<#= _model.EntityTypeName #>s.Queries.List;

public record List<#= _model.EntityTypeName #>sQuery : PaginatedListQuery
{

}

public class List<#= _model.EntityTypeName #>sQueryHandler : IRequestHandler<List<#= _model.EntityTypeName #>sQuery, PaginatedListResponse<<#= _model.EntityTypeName #>Dto>>
{
    private readonly IApplicationDbContext _dbContext;

    public List<#= _model.EntityTypeName #>sQueryHandler(IApplicationDbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<AppResponse<PaginatedListResponse<<#= _model.EntityTypeName #>Dto>>> Handle(
        List<#= _model.EntityTypeName #>sQuery query,
        CancellationToken cancellationToken)
    {
        var <#= _model.EntityVariableName #>Queryable = BuildQueryable(query);

        var result = await PaginatedListResponse<<#= _model.EntityTypeName #>Dto>.Create(
            <#= _model.EntityVariableName #>Queryable,
            query,
            entity => <#= _model.EntityTypeName #>Dto.MapFromEntity(entity),
            cancellationToken);

        return new(200, result);
    }

    private IQueryable<<#= _model.EntityTypeName #>Entity> BuildQueryable(List<#= _model.EntityTypeName #>sQuery query)
    {
        var queryable = _dbContext.<#= _model.EntityTypeName #>s;

        return queryable;
    }
}
