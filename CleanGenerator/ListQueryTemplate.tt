<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using <#= _model.ProjectName #>.Application.<#= _model.EntityTypeName #>s.Dtos;
using <#= _model.ProjectName #>.Application.Common.AppRequests;
using <#= _model.ProjectName #>.Application.Common.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace <#= _model.ProjectName #>.Application.<#= _model.EntityTypeName #>s.Queries.List;

public record List<#= _model.EntityTypeName #>sQuery
{

}

public class List<#= _model.EntityTypeName #>sQueryHandler : IRequestHandler<List<#= _model.EntityTypeName #>sQuery, List<<#= _model.EntityTypeName #>Dto>>
{
    private readonly I<#= _model.ProjectName #>DbContext _dbContext;

    public List<#= _model.EntityTypeName #>sQueryHandler(I<#= _model.ProjectName #>DbContext dbContext)
    {
        _dbContext = dbContext;
    }

    public async Task<AppResponse<List<<#= _model.EntityTypeName #>Dto>>> Handle(
        List<#= _model.EntityTypeName #>sQuery query,
        CancellationToken cancellationToken)
    {
        var dtos = await _dbContext.<#= _model.EntityTypeName #>s
            .Select(_ => <#= _model.EntityTypeName #>Dto.MapFromEntity(_))
            .ToListAsync(cancellationToken);

        return new(200, dtos);
    }
}
